import numpy as np

# -------------------------------
# 1. Data Setup
# -------------------------------
students = np.array(["Alice", "Bob", "Charlie", "David", "Eva"])
subjects = ["Math", "Science", "English"]

# Marks: rows = students, columns = subjects
marks = np.array([
    [85, 78, 92],
    [72, 88, 91],
    [90, 85, 87],
    [60, 70, 65],
    [95, 92, 98]
])

# -------------------------------
# 2. Total and Average Calculation
# -------------------------------
total_marks = marks.sum(axis=1)
average_marks = marks.mean(axis=1)

# -------------------------------
# 3. Grade Assignment Function
# -------------------------------
def assign_grade(avg):
    if avg >= 90:
        return 'A'
    elif avg >= 75:
        return 'B'
    elif avg >= 60:
        return 'C'
    else:
        return 'D'

grades = np.array([assign_grade(avg) for avg in average_marks])

# -------------------------------
# 4. Subject-wise Analysis
# -------------------------------
subject_avg = marks.mean(axis=0)
subject_max = marks.max(axis=0)
subject_min = marks.min(axis=0)

# -------------------------------
# 5. Top and Bottom Performers
# -------------------------------
top_index = np.argmax(total_marks)
bottom_index = np.argmin(total_marks)

# -------------------------------
# 6. Student Report Display
# -------------------------------
def display_student_report():
    print("----- STUDENT REPORT -----")
    print(f"{'Name':<10}{'Total':<8}{'Average':<10}{'Grade':<6}")
    for i in range(len(students)):
        print(f"{students[i]:<10}{total_marks[i]:<8}{average_marks[i]:<10.2f}{grades[i]:<6}")

display_student_report()

# -------------------------------
# 7. Subject-wise Statistics
# -------------------------------
print("\n----- SUBJECT-WISE STATS -----")
for i in range(len(subjects)):
    print(f"{subjects[i]:<8} | Avg: {subject_avg[i]:.2f} | Max: {subject_max[i]} | Min: {subject_min[i]}")

# -------------------------------
# 8. Top & Bottom Performer
# -------------------------------
print("\nTop Performer:", students[top_index])
print("Bottom Performer:", students[bottom_index])

# -------------------------------
# 9. Sort Students by Total Marks
# -------------------------------
sorted_indices = np.argsort(-total_marks)  # Descending
print("\n----- SORTED BY TOTAL MARKS -----")
print(f"{'Rank':<6}{'Name':<10}{'Total':<8}")
for rank, i in enumerate(sorted_indices, start=1):
    print(f"{rank:<6}{students[i]:<10}{total_marks[i]:<8}")

# -------------------------------
# 10. Search by Name
# -------------------------------
def search_student(name):
    if name in students:
        idx = np.where(students == name)[0][0]
        print(f"\nReport for {name}:")
        print(f"Marks: {marks[idx]}")
        print(f"Total: {total_marks[idx]}, Average: {average_marks[idx]:.2f}, Grade: {grades[idx]}")
    else:
        print("Student not found.")

# Example search
search_student("Charlie")

